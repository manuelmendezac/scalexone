import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Heart, DollarSign, TrendingUp, Shield, Award, Zap, BarChart3, Target, MousePointer, Percent, RefreshCw, Download, GraduationCap, Briefcase } from 'lucide-react';
import { supabase } from '../../supabase';
import { toast } from 'react-hot-toast';

// Interfaces para el Dashboard
interface DashboardMetrics {
  totalEarnings: number;
  pendingEarnings: number;
  refunds: number;
  refundPercentage: number;
  totalSales: number;
  totalClicks: number;
  totalLeads: number;
  conversionRate: number;
  paymentsGenerated: number;
  paymentsReceived: number;
}

interface EarningsData {
  date: string;
  earnings: number;
}

interface TopAffiliate {
  id: string;
  name: string;
  avatar: string;
  earnings: number;
  rank: number;
}

interface SolicitudAfiliacion {
  id: string;
  producto_id: string;
  tabla_producto: string;
  estado: 'pendiente' | 'aprobada' | 'rechazada';
  fecha_solicitud: string;
}

const MarketingAfiliadosPanel: React.FC = () => {
  const [solicitudes, setSolicitudes] = useState<SolicitudAfiliacion[]>([]);
  const [loading, setLoading] = useState(true);
  const [showSolicitudes, setShowSolicitudes] = useState(false);
  
  // Estado del Dashboard
  const [dateFilter, setDateFilter] = useState('7d');
  const [dashboardMetrics, setDashboardMetrics] = useState<DashboardMetrics>({
    totalEarnings: 1247.85,
    pendingEarnings: 324.50,
    refunds: 0.00,
    refundPercentage: 0,
    totalSales: 23,
    totalClicks: 1847,
    totalLeads: 142,
    conversionRate: 7.7,
    paymentsGenerated: 8,
    paymentsReceived: 5
  });
  
  // Datos del gr√°fico de ingresos (√∫ltimos 7 d√≠as)
  const [earningsData, setEarningsData] = useState<EarningsData[]>([
    { date: '2024-01-15', earnings: 125 },
    { date: '2024-01-16', earnings: 180 },
    { date: '2024-01-17', earnings: 245 },
    { date: '2024-01-18', earnings: 190 },
    { date: '2024-01-19', earnings: 310 },
    { date: '2024-01-20', earnings: 420 },
    { date: '2024-01-21', earnings: 380 }
  ]);
  
  // Top afiliados para gamificaci√≥n
  const [topAfiliates, setTopAfiliates] = useState<TopAffiliate[]>([
    { id: '1', name: 'Ana Garc√≠a', avatar: 'üë©‚Äçüíº', earnings: 2847.50, rank: 1 },
    { id: '2', name: 'Carlos Ruiz', avatar: 'üë®‚Äçüíª', earnings: 2134.20, rank: 2 },
    { id: '3', name: 'Laura Mart√≠n', avatar: 'üë©‚ÄçüöÄ', earnings: 1856.75, rank: 3 },
    { id: '4', name: 'Diego L√≥pez', avatar: 'üë®‚ÄçüéØ', earnings: 1423.90, rank: 4 },
    { id: '5', name: 'Sofia Torres', avatar: 'üë©‚Äçüé®', earnings: 1247.85, rank: 5 }
  ]);

  useEffect(() => {
    cargarDatos();
  }, []);

  const cargarDatos = async () => {
    setLoading(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // Cargar solicitudes del usuario
      await cargarSolicitudes(user.id);
      
    } catch (error) {
      console.error('Error cargando datos:', error);
      toast.error('Error al cargar los datos del dashboard');
    } finally {
      setLoading(false);
    }
  };

  const cargarSolicitudes = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .from('solicitudes_afiliacion')
        .select('*')
        .eq('usuario_id', userId)
        .order('fecha_solicitud', { ascending: false });

      if (error) throw error;
      setSolicitudes(data || []);
    } catch (error) {
      console.error('Error cargando solicitudes:', error);
    }
  };

  // Funci√≥n para renderizar el gr√°fico simple de ingresos
  const renderEarningsChart = () => {
    const maxEarnings = Math.max(...earningsData.map(d => d.earnings));
    const chartHeight = 120;
    
    return (
      <div className="mt-4">
        <div className="flex items-end space-x-2 h-32">
          {earningsData.map((data, index) => {
            const height = (data.earnings / maxEarnings) * chartHeight;
            return (
              <div key={index} className="flex flex-col items-center flex-1">
                <div 
                  className="bg-gradient-to-t from-orange-500 to-amber-400 rounded-t-md transition-all duration-300 hover:opacity-80 relative group"
                  style={{ height: `${height}px`, minHeight: '8px' }}
                >
                  <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity">
                    ${data.earnings}
                  </div>
                </div>
                <span className="text-xs text-gray-500 mt-1">
                  {new Date(data.date).getDate()}/{new Date(data.date).getMonth() + 1}
                </span>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // Dashboard Principal
  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Header con filtros */}
      <div className="bg-gradient-to-r from-gray-900/50 to-gray-800/50 rounded-xl p-6 border border-gray-700">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h2 className="text-2xl font-bold text-white mb-2">üèÜ Panel de Control de Afiliados</h2>
            <p className="text-gray-400">Monitorea tu rendimiento y maximiza tus ganancias</p>
          </div>
          
          <div className="flex items-center gap-4">
            <select
              value={dateFilter}
              onChange={(e) => setDateFilter(e.target.value)}
              className="bg-gray-800 border border-gray-600 rounded-lg px-4 py-2 text-white text-sm focus:outline-none focus:border-orange-500"
            >
              <option value="7d">√öltimos 7 d√≠as</option>
              <option value="30d">√öltimos 30 d√≠as</option>
              <option value="90d">√öltimos 90 d√≠as</option>
              <option value="year">Este a√±o</option>
            </select>
            
            <button className="bg-orange-500/20 hover:bg-orange-500/30 text-orange-300 px-4 py-2 rounded-lg transition-colors duration-200 flex items-center gap-2 border border-orange-500/30">
              <Download className="w-4 h-4" />
              <span>Exportar</span>
            </button>
          </div>
        </div>
      </div>

      {/* Gr√°fico de Ingresos */}
      <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 rounded-xl p-6 border border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white">üìä Gr√°fico de Ingresos</h3>
          <div className="text-right">
            <div className="text-sm text-gray-400">Total del per√≠odo</div>
            <div className="text-2xl font-bold text-orange-400">
              ${earningsData.reduce((acc, curr) => acc + curr.earnings, 0).toLocaleString()}
            </div>
          </div>
        </div>
        {renderEarningsChart()}
      </div>

      {/* M√©tricas Principales */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-gradient-to-br from-green-500/20 to-emerald-600/20 rounded-xl p-6 border border-green-500/30">
          <div className="flex items-center justify-between mb-4">
            <div>
              <p className="text-green-300 text-sm font-medium">üí∞ Total</p>
              <p className="text-white text-3xl font-bold">${dashboardMetrics.totalEarnings.toLocaleString()}</p>
              <p className="text-green-200 text-xs mt-1">Ingresos acumulados</p>
            </div>
            <DollarSign className="w-12 h-12 text-green-400" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-orange-500/20 to-red-600/20 rounded-xl p-6 border border-orange-500/30">
          <div className="flex items-center justify-between mb-4">
            <div>
              <p className="text-orange-300 text-sm font-medium">üîÑ Reembolsada</p>
              <p className="text-white text-3xl font-bold">${dashboardMetrics.refunds.toFixed(2)}</p>
              <p className="text-orange-200 text-xs mt-1">Tasa de reembolso</p>
            </div>
            <RefreshCw className="w-12 h-12 text-orange-400" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-blue-500/20 to-cyan-600/20 rounded-xl p-6 border border-blue-500/30">
          <div className="flex items-center justify-between mb-4">
            <div>
              <p className="text-blue-300 text-sm font-medium">üìà % Reembolso</p>
              <p className="text-white text-3xl font-bold">{dashboardMetrics.refundPercentage}%</p>
              <p className="text-blue-200 text-xs mt-1">Porcentaje de devoluciones</p>
            </div>
            <Percent className="w-12 h-12 text-blue-400" />
          </div>
        </div>
      </div>

      {/* Desempe√±o */}
      <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 rounded-xl p-6 border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-6 flex items-center gap-2">
          <Target className="w-5 h-5 text-purple-400" />
          Desempe√±o
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-white">{dashboardMetrics.totalSales}</div>
            <div className="text-green-400 text-sm flex items-center justify-center gap-1 mt-1">
              <TrendingUp className="w-4 h-4" />
              +15% esta semana
            </div>
            <div className="text-gray-400 text-sm mt-1">Ventas</div>
          </div>
          
          <div className="text-center">
            <div className="text-3xl font-bold text-white">{dashboardMetrics.totalClicks.toLocaleString()}</div>
            <div className="text-blue-400 text-sm flex items-center justify-center gap-1 mt-1">
              <MousePointer className="w-4 h-4" />
              +8% vs anterior
            </div>
            <div className="text-gray-400 text-sm mt-1">Clics</div>
          </div>
          
          <div className="text-center">
            <div className="text-3xl font-bold text-white">{dashboardMetrics.totalLeads}</div>
            <div className="text-purple-400 text-sm flex items-center justify-center gap-1 mt-1">
              <Users className="w-4 h-4" />
              Calidad alta
            </div>
            <div className="text-gray-400 text-sm mt-1">Leads</div>
          </div>
        </div>
      </div>

      {/* Pagos en Efectivo */}
      <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 rounded-xl p-6 border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-6 flex items-center gap-2">
          <ShoppingCart className="w-5 h-5 text-green-400" />
          Pagos en Efectivo
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-white">{dashboardMetrics.paymentsGenerated}</div>
            <div className="text-gray-400 text-sm mt-1">Generados</div>
          </div>
          
          <div className="text-center">
            <div className="text-3xl font-bold text-white">{dashboardMetrics.paymentsReceived}</div>
            <div className="text-gray-400 text-sm mt-1">Pagados</div>
          </div>
          
          <div className="text-center">
            <div className="text-3xl font-bold text-white">{dashboardMetrics.conversionRate}%</div>
            <div className="text-gray-400 text-sm mt-1">% Conversi√≥n</div>
          </div>
        </div>
      </div>

      {/* Top Afiliados - Gamificaci√≥n */}
      <div className="bg-gradient-to-br from-gray-900/50 to-gray-800/50 rounded-xl p-6 border border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-white flex items-center gap-2">
            üèÜ Top Afiliados (Conquistas)
          </h3>
          <button className="text-orange-400 hover:text-orange-300 text-sm">Ver todas</button>
        </div>
        
        <div className="flex items-center space-x-4 overflow-x-auto pb-2">
          {topAfiliates.map((affiliate, index) => (
            <motion.div
              key={affiliate.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="flex-shrink-0 text-center"
            >
              <div className={`w-16 h-16 rounded-full flex items-center justify-center text-2xl mb-2 ${
                index === 0 ? 'bg-gradient-to-r from-yellow-400 to-orange-500' :
                index === 1 ? 'bg-gradient-to-r from-gray-300 to-gray-400' :
                index === 2 ? 'bg-gradient-to-r from-orange-400 to-yellow-600' :
                'bg-gradient-to-r from-purple-500 to-blue-600'
              }`}>
                {affiliate.avatar}
              </div>
              <div className="text-white text-sm font-medium">{affiliate.name.split(' ')[0]}</div>
              <div className="text-green-400 text-xs">${affiliate.earnings.toLocaleString()}</div>
              <div className="text-gray-500 text-xs">#{affiliate.rank}</div>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="p-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-400"></div>
          <span className="ml-3 text-gray-300">Cargando dashboard...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {renderDashboard()}
    </div>
  );
};

export default MarketingAfiliadosPanel; 